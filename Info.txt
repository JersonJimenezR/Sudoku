[METODO 1] -> Todas las dificultades.

	-- [BUSQUEDA]

		1. Recorre todas las matrices buscando la que tenga más números (Menos espacios vacíos)
		2. Omite las matrices vetadas 3x3 y las completadas 3x3 


	-- [PONER]
		
		-- [RESTRICCIONES]

			1. En cada uno de los espacios en blanco evalúa la matriz 3x3.
			2. Evalúa la fila y la columna que corresponda.
			3. n = número de subdivisión por rama.			
				3.1. Almacena en el vector [OPCIONES POR CELDA] (Este ciclo va de 1 a 9 por celda) la cantidad posible de números que puedan estar en la celda, si el número de opciones llega a ser mayor o igual a n (>=n) entonces el número será vetado.
			4. Esta evaluación se realiza con los números del 1 al 9 excluyendo los números que ya están puestos en la matriz 3x3.			


		-- [OPCIONES DE PONER]

			1. Si el número puede estar y hay dos números posibles por celda entonces:

			   1. Pone el número y guarda la matriz en el cubo o lista
			   2. Guarda otra matriz en el cubo o lista pero con el segundo número posible de la misma celda.
			   3. Ambas posiciones Z del cubo (o la posición de la lista) se guardan en vectores que irán almacenados en una matriz, el vector será de longitud 2, en su primera posición almacenará posición de la matriz en cuestión y en su segunda posición almacenará la posición de la matriz de origen , esto para llevar la trazabilidad del árbol.

			-- Si lo pone entonces:

				Ejecuta [METODO 2]					
				

			-- Si no lo pone entonces:
				
				1. Se agrega el número al vector vetados 3x3
				2. Si al final la matriz no tuvo cambios se veta la matriz 3x3.
				3. Si todas las matrices 3x3 están vetadas entonces se tomará la matriz 9x9 prima almacenada en la lista o cubo
				5. Si la n-esima prima también veto todas sus matrices 3x3 entonces retornará a su matriz origen para así poder continuar ya no con esta sino con su siguiente prima.
				6. Se incrementa en 1 los intentos fallidos.
				7. Limpia el vector vetados 3x3 y se repite el ciclo [BUSQUEDA] con la nueva matriz 9x9.



[METODO 2]

	-- [BUSQUEDA]

		1. Recorre todas las matrices buscando la que tenga más números (Menos espacios vacíos)
		2. Omite las matrices vetadas 3x3 y las completadas 3x3 


	-- [PONER]
		
		-- [RESTRICCIONES]

			1. En cada uno de los espacios en blanco evalúa la matriz 3x3.
			2. Evalúa la fila y la columna que corresponda
			3. Almacena en el vector [OPCIONES POR NUMERO] (Este ciclo va de 1 a 9 por matriz 3x3) la cantidad posible de veces que un número puede estar en la matriz 3x3, si el número de opciones llega a ser mayor o igual a 2 (>=2) entonces el número será vetado. 
			4. Esta evaluación se realiza con los números del 1 al 9 excluyendo los números que ya están puestos en la matriz 3x3.
			5. Esta evaluación se realiza con los números del 1 al 9 excluyendo los números que están vetados.


		-- [OPCIONES DE PONER]

			1. Si el número puede estar y hay una única opción deacuerdo a las restricciones previas, es decir el vector [OPCIONES POR NUMERO ] entonces lo pone

			-- Si lo pone entonces:

				1. Limpia el vector vetados (3x3)
				2. Limpia el vector vetados (9x9), este contiene el nombre de la matriz (A,B,C,D,E,F,G,H,I)
				3. Evalúa la matriz 3x3 por si sólo falta un número, entonces pone el número que falta, veta la matriz en el vector completados 9x9 y el número que puso ejecuta de nuevo el ciclo [PONER].
				4. Evalúa la fila y columna de sus coordenadas y si sólo falta un número lo pone y se repite el ciclo [PONER]

			-- Si no lo pone entonces:
				
				1. Se agrega el número al vector vetados 3x3.				
				2. Si al final la matriz no tuvo cambios se veta la matriz 3x3, en caso tal de que todas las matrices 3x3 estén vetadas entonces ejecuta [METODO 1] de lo contrario limpia el vector vetados 3x3 y se repite el ciclo [BUSQUEDA]





        String matrix = "";
        for (int i = 0; i < sudoku.length; i++) 
        {    
            if( i == 0 || i == 3 || i == 6)
            {
                System.out.println("-------------------");
                for (int j = 0; j < sudoku[i].length; j++) 
                {
                    if(j != sudoku[i].length -1)
                    {
                        matrix += sudoku[i][j] + " ";

                    }else{
                        matrix += sudoku[i][j] + "\n";
                    }
                }
            }
        }
        
        System.out.println(matrix);   


